// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    description   String?
    accounts      Account[]
    sessions      Session[]
    transactions  Transactions[]
}

model Transactions {
    id                       Int      @id @default(autoincrement())
    userId                   String
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    description              String?
    amount                   Decimal
    bankId                   Int
    bank                     Banks    @relation(fields: [bankId], references: [id], onDelete: Cascade)
    accountTransferredToId   Int?
    transferredTo            Banks?   @relation("transferredTo", fields: [accountTransferredToId], references: [id], onDelete: Cascade)
    accountTransferredFromId Int?
    transferredFrom          Banks?   @relation("transferredFrom", fields: [accountTransferredFromId], references: [id], onDelete: Cascade)
    createdAt                DateTime @default(now())
}

model Banks {
    id              Int            @id @default(autoincrement())
    userId          String
    name            String
    description     String
    emoji           String
    type            String
    transferredTo   Transactions[] @relation("transferredTo")
    Transactions    Transactions[]
    transferredFrom Transactions[] @relation("transferredFrom")

    @@unique([userId, name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
